"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Discovery = void 0;
const expect = require("@fantasticfiasco/expect");
const bonjour = require("../vendor/bonjour");
const events_1 = require("events");
const Log_1 = require("./Log");
const Mappings_1 = require("./Mappings");
const NetworkInterface_1 = require("./NetworkInterface");
/**
 * Class responsible for discovering Axis cameras on the network.
 */
class Discovery {
    constructor() {
        this.eventEmitter = new events_1.EventEmitter();
    }
    /**
     * Start listen for device advertisements on all network interface
     * addresses.
     */
    start() {
        expect.toNotExist(this.bonjour, 'Discovery has already been started');
        expect.toNotExist(this.browser, 'Discovery has already been started');
        Log_1.log('Discovery#start');
        this.setup();
    }
    /**
     * Stop listening for device advertisements.
     */
    stop() {
        expect.toExist(this.bonjour, 'Discovery has not been started');
        expect.toExist(this.browser, 'Discovery has not been started');
        Log_1.log('Discovery#stop');
        this.teardown();
    }
    /**
     * Triggers a new search for devices on the network.
     */
    search() {
        expect.toExist(this.browser, 'Discovery has not been started');
        Log_1.log('Discovery#search');
        this.browser.update();
    }
    /**
     * Alias for on(eventName, listener).
     */
    addListener(eventName, listener) {
        this.eventEmitter.addListener(eventName, listener);
        return this;
    }
    /**
     * Adds the listener function to the end of the listeners array for the event named eventName.
     * No checks are made to see if the listener has already been added. Multiple calls passing the
     * same combination of eventName and listener will result in the listener being added, and
     * called, multiple times.
     * @param eventName The name of the event.
     * @param listener The callback function.
     */
    on(eventName, listener) {
        this.eventEmitter.on(eventName, listener);
        return this;
    }
    /**
     * Adds a one-time listener function for the event named eventName. The next time eventName is
     * triggered, this listener is removed and then invoked.
     * @param eventName The name of the event.
     * @param listener The callback function.
     */
    once(eventName, listener) {
        this.eventEmitter.once(eventName, listener);
        return this;
    }
    /**
     * Alias for off(eventName, listener).
     * @param eventName The name of the event.
     * @param listener The callback function.
     */
    removeListener(eventName, listener) {
        this.eventEmitter.removeListener(eventName, listener);
        return this;
    }
    /**
     * Removes the specified listener from the listener array for the event named eventName.
     * @param eventName The name of the event.
     * @param listener The callback function.
     */
    off(eventName, listener) {
        this.eventEmitter.off(eventName, listener);
        return this;
    }
    /**
     * Removes all listeners, or those of the specified eventName.
     * @param eventName The name of the event.
     */
    removeAllListeners(eventName) {
        this.eventEmitter.removeAllListeners(eventName);
        return this;
    }
    /**
     * By default EventEmitters will print a warning if more than 10 listeners are added for a
     * particular event. This is a useful default that helps finding memory leaks. The
     * emitter.setMaxListeners() method allows the limit to be modified for this specific
     * EventEmitter instance. The value can be set to Infinity (or 0) to indicate an unlimited
     * number of listeners.
     */
    setMaxListeners(n) {
        this.eventEmitter.setMaxListeners(n);
        return this;
    }
    /**
     * Returns the current max listener value for the EventEmitter which is either set by
     * emitter.setMaxListeners(n) or defaults to EventEmitter.defaultMaxListeners.
     */
    getMaxListeners() {
        return this.eventEmitter.getMaxListeners();
    }
    /**
     * Returns a copy of the array of listeners for the event named eventName.
     * @param eventName The name of the event.
     */
    // tslint:disable-next-line:ban-types
    listeners(eventName) {
        return this.eventEmitter.listeners(eventName);
    }
    /**
     * Returns a copy of the array of listeners for the event named eventName, including any
     * wrappers (such as those created by once()).
     * @param eventName The name of the event.
     */
    // tslint:disable-next-line:ban-types
    rawListeners(eventName) {
        return this.eventEmitter.rawListeners(eventName);
    }
    /**
     * Synchronously calls each of the listeners registered for the event named eventName, in the
     * order they were registered, passing the supplied arguments to each.
     * @param eventName The name of the event.
     */
    emit(eventName, args) {
        return this.eventEmitter.emit(eventName, args);
    }
    /**
     * Returns the number of listeners listening to the event named eventName.
     * @param eventName The name of the event.
     */
    listenerCount(eventName) {
        return this.eventEmitter.listenerCount(eventName);
    }
    /**
     * Adds the listener function to the beginning of the listeners array for the event named
     * eventName. No checks are made to see if the listener has already been added. Multiple calls
     * passing the same combination of eventName and listener will result in the listener being
     * added, and called, multiple times.
     * @param eventName The name of the event.
     * @param listener The callback function.
     */
    prependListener(eventName, listener) {
        this.eventEmitter.prependListener(eventName, listener);
        return this;
    }
    /**
     * Adds a one-time listener function for the event named eventName to the beginning of the
     * listeners array. The next time eventName is triggered, this listener is removed, and then
     * invoked.
     * @param eventName The name of the event.
     * @param listener The callback function.
     */
    prependOnceListener(eventName, listener) {
        this.eventEmitter.prependOnceListener(eventName, listener);
        return this;
    }
    /**
     * Returns an array listing the events for which the emitter has registered listeners. The
     * values in the array are strings or Symbols.
     */
    eventNames() {
        return this.eventEmitter.eventNames();
    }
    onUp(service) {
        Log_1.log('Discovery#onUp - %s', service.host);
        const device = Mappings_1.mapFromService(service);
        if (device) {
            this.eventEmitter.emit('hello', device);
        }
        else {
            Log_1.log('Discovery#onUp - unable to map %o', service);
        }
    }
    onDown(service) {
        Log_1.log('Discovery#onDown - %s', service.host);
        const device = Mappings_1.mapFromService(service);
        if (device) {
            this.eventEmitter.emit('goodbye', device);
        }
        else {
            Log_1.log('Discovery#onDown - unable to map %o', service);
        }
    }
    setup() {
        const addresses = NetworkInterface_1.getIPv4Addresses();
        Log_1.log('Discovery#setup - interface addresses: %o', addresses);
        // The type definitions are not in sync with the fork of Bonjour I am
        // depending on, that's why we have to go to the dark side
        const untypedBonjour = bonjour;
        this.bonjour = untypedBonjour({ interface: addresses });
        this.browser = this.bonjour.find({ type: 'axis-video' });
        this.browser.on('up', (service) => this.onUp(service));
        this.browser.on('down', (service) => this.onDown(service));
    }
    teardown() {
        this.browser.removeAllListeners('up');
        this.browser.removeAllListeners('down');
        this.browser.stop();
        this.browser = undefined;
        this.bonjour.destroy();
        this.bonjour = undefined;
    }
}
exports.Discovery = Discovery;
//# sourceMappingURL=Discovery.js.map