"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ssdp = void 0;
const ssdp = require("axis-discovery-ssdp");
const __1 = require("..");
const logging_1 = require("../logging");
class Ssdp {
    constructor() {
        this.discovery = new ssdp.Discovery();
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.discovery.start();
            }
            catch (error) {
                logging_1.log('Ssdp#start - unable to start discovery %o', error);
                throw error;
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.discovery.stop();
            }
            catch (error) {
                logging_1.log('Ssdp#stop - unable to stop discovery %o', error);
                throw error;
            }
        });
    }
    search() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.discovery.search();
            }
            catch (error) {
                logging_1.log('Ssdp#search - unable to search %o', error);
                throw error;
            }
        });
    }
    onHello(callback) {
        this.discovery.on('hello', (ssdpDevice) => {
            const device = this.mapToDevice(ssdpDevice);
            if (device) {
                callback(device);
            }
            else {
                logging_1.log('Ssdp#onHello - unable to map %o', ssdpDevice);
            }
        });
    }
    onGoodbye(callback) {
        this.discovery.on('goodbye', (ssdpDevice) => {
            const device = this.mapToDevice(ssdpDevice);
            if (device) {
                callback(device);
            }
            else {
                logging_1.log('Ssdp#onGoodbye - unable to map %o', ssdpDevice);
            }
        });
    }
    mapToDevice(ssdpDevice) {
        if (!ssdpDevice.macAddress) {
            return undefined;
        }
        return new __1.Device(ssdpDevice.address, undefined, ssdpDevice.port, ssdpDevice.macAddress, ssdpDevice.friendlyName, ssdpDevice.modelName, ssdpDevice.modelDescription, ssdpDevice.modelNumber, ssdpDevice.presentationURL);
    }
}
exports.Ssdp = Ssdp;
//# sourceMappingURL=Ssdp.js.map