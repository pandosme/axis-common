"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bonjour = void 0;
const bonjour = require("axis-discovery-bonjour");
const Device_1 = require("../Device");
const logging_1 = require("../logging");
class Bonjour {
    constructor() {
        this.discovery = new bonjour.Discovery();
    }
    start() {
        return new Promise((resolve, reject) => {
            try {
                this.discovery.start();
                resolve();
            }
            catch (error) {
                logging_1.log('Bonjour#start - unable to start discovery %o', error);
                reject(error);
            }
        });
    }
    stop() {
        return new Promise((resolve, reject) => {
            try {
                this.discovery.stop();
                resolve();
            }
            catch (error) {
                logging_1.log('Bonjour#stop - unable to stop discovery %o', error);
                reject(error);
            }
        });
    }
    search() {
        return new Promise((resolve, reject) => {
            try {
                this.discovery.search();
                resolve();
            }
            catch (error) {
                logging_1.log('Bonjour#search - unable to search %o', error);
                reject(error);
            }
        });
    }
    onHello(callback) {
        this.discovery.on('hello', (bonjourDevice) => {
            const device = this.mapToDevice(bonjourDevice);
            callback(device);
        });
    }
    onGoodbye(callback) {
        this.discovery.on('goodbye', (bonjourDevice) => {
            const device = this.mapToDevice(bonjourDevice);
            callback(device);
        });
    }
    mapToDevice(bonjourDevice) {
        return new Device_1.Device(bonjourDevice.address, bonjourDevice.linkLocalAddress, bonjourDevice.port, bonjourDevice.macAddress, bonjourDevice.friendlyName, undefined, undefined, undefined, undefined);
    }
}
exports.Bonjour = Bonjour;
//# sourceMappingURL=Bonjour.js.map